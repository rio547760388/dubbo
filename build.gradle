/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.4/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application
    id 'application'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

group 'com.tian'
version('0.0.1')
compileJava {

}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.0-jre'
    implementation 'org.apache.dubbo:dubbo:2.7.6'

    implementation('org.apache.zookeeper:zookeeper:3.4.10')

    // https://mvnrepository.com/artifact/org.apache.curator/curator-recipes
    implementation('org.apache.curator:curator-recipes:4.3.0') {
        exclude group: 'org.apache.zookeeper', module: 'zookeeper'
    }

    // https://mvnrepository.com/artifact/org.apache.curator/curator-framework
    implementation('org.apache.curator:curator-framework:4.3.0') {
        exclude group: 'org.apache.zookeeper', module: 'zookeeper'
    }

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation 'org.slf4j:slf4j-api:1.7.30'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12
    implementation 'org.slf4j:slf4j-log4j12:1.7.30'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

application {
    // Define the main class for the application
    mainClassName = 'com.tian.App'
    archivesBaseName = 'dubbo-provider'
    version = '0.0.1'
}

tasks.withType(JavaCompile) {
    options.encoding('UTF-8')
}

jar {
    println configurations.runtime
    println "========="

    configurations.runtime.each { println it.path }

    println "========="

    configurations.runtimeClasspath.each { println it.path }

    println "========="

    println configurations

    manifest {
        attributes(
                "Manifest-Version": 1.0,
                mainClassName: mainClassName
        )
    }

    from {

    }

}

/*tasks.withType(Jar) {
    manifest {
        attributes "Manifest-Version": 1.0,
                'Main-Class': 'com.tian.App'
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}*/

