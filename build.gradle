buildscript {
    ext {
        springBootVersion = '2.2.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        /* 添加插件依赖路径（通过jar方式） */
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}" as Object)
    }
}

subprojects {
    apply(plugin: 'java')
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group = 'com.tian'
    version = '1.0.0'

    sourceCompatibility = '1.8'

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }

    dependencies {

        //springboot core
        implementation('org.springframework.boot:spring-boot-starter')

        implementation('org.apache.dubbo:dubbo-spring-boot-starter:2.7.6')

        // This dependency is used by the application.
        implementation 'com.google.guava:guava:28.0-jre'
        implementation('org.apache.dubbo:dubbo:2.7.6')

        //Zookeeper 所有的典型应用场景的实现（除了两阶段提交外） ，该组件依赖 Client 和 Framework 。
        //包括 监听、各种分布式锁（可重入锁、排他锁、共享锁、信号锁等）、缓存、队列、选举、分布式 atomic（分布式计数器）、分布式Barrier 等等。
        implementation('org.apache.curator:curator-recipes:4.3.0')

        //简化 Zookeeper 高级功能的使用，并增加了一些新的功能，比如 Zookeeper 集群连接、重试等。
        implementation('org.apache.curator:curator-framework:4.3.0')

        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        compileOnly 'org.projectlombok:lombok:1.18.12'

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }

    }

    test {
        useJUnitPlatform()
    }

    javadoc.options {
        use = true
        author = true
        version = true
    }
}







